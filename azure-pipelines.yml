trigger: none

pool:
  vmImage: ubuntu-latest

variables:
  terraformVersion: ${{ library.TerraformVars.terraformVersion }}
  backendServiceArm: ${{ library.TerraformVars.backendServiceArm }}
  backendAzureRmResourceGroupName: ${{ library.TerraformVars.backendAzureRmResourceGroupName }}
  backendAzureRmStorageAccountName: ${{ library.TerraformVars.backendAzureRmStorageAccountName }}
  backendAzureRmContainerName: ${{ library.TerraformVars.backendAzureRmContainerName }}

parameters:
  - name: subscription
    type: string
    displayName: 'Environment Name'
    default: 'Dev'
    values:
      - Dev
      - Test
      - Stage
  
  - name: terraformaction
    type: string
    displayName: 'terraformaction'
    default: 'Create'
    values:
      - Create  
      - Destroy

steps:
- task: TerraformInstaller@0
  displayName: "Terraform install"
  inputs: 
   terraformVersion: '$(terraformVersion)'

- script: |
    if [ "${{ parameters.subscription }}" == "Dev" ]; then
      cp "$(Build.SourcesDirectory)/Environments/Dev.auto.tfvars" "$(Build.SourcesDirectory)/"
    elif [ "${{ parameters.subscription }}" == "Test" ]; then
      cp "$(Build.SourcesDirectory)/Environments/Test.auto.tfvars" "$(Build.SourcesDirectory)/"
    else
      cp "$(Build.SourcesDirectory)/Environments/Stage.auto.tfvars" "$(Build.SourcesDirectory)/"
    fi
  displayName: 'Copy .auto.tfvars file'

- script: |
    if [ "${{ parameters.subscription }}" == "Dev" ]; then
      config_file_path="$(Build.SourcesDirectory)/Dev.auto.tfvars"
      backend_key="terraform_dev.tfstate"
    elif [ "${{ parameters.subscription }}" == "Test" ]; then
      config_file_path="$(Build.SourcesDirectory)/Test.auto.tfvars"
      backend_key="terraform_test.tfstate"
    else
      config_file_path="$(Build.SourcesDirectory)/Stage.auto.tfvars"
      backend_key="terraform_stage.tfstate"
    fi
    echo "Config File Path: $config_file_path"
    echo "##vso[task.setvariable variable=config_file_path]$config_file_path"
    echo "##vso[task.setvariable variable=backend_key]$backend_key"
  displayName: 'Set config_file_path and backend_key variables'

- task: CmdLine@2
  inputs:
    script: |
      echo "$(config_file_path)"
      echo "$(backend_key)"

- task: TerraformTaskV4@4
  displayName: "Terraform init"
  inputs:
    provider: 'azurerm'
    command: 'init'
    backendServiceArm: '$(backendServiceArm)'
    backendAzureRmResourceGroupName: '$(backendAzureRmResourceGroupName)'
    backendAzureRmStorageAccountName: '$(backendAzureRmStorageAccountName)'
    backendAzureRmContainerName: '$(backendAzureRmContainerName)'
    backendAzureRmKey: '$(backend_key)'

- task: TerraformTaskV4@4
  displayName: "Terraform plan"
  inputs:
    provider: 'azurerm'
    command: 'plan'
    commandOptions: '-out=terraform.tfplan -var-file=$(config_file_path)'
    environmentServiceNameAzureRM: '$(backendServiceArm)'

- task: PublishBuildArtifacts@1
  displayName: "publish build artifacts"
  inputs:
    pathtoPublish: '$(System.DefaultWorkingDirectory)/terraform.tfplan'
    artifactName: 'terraformPlan'
    publishLocation: 'Container'

- task: TerraformTaskV4@4
  displayName: "Terraform apply"
  inputs:
    provider: 'azurerm'
    command: 'apply'
    commandOptions: "-var-file=$(config_file_path)"
    environmentServiceNameAzureRM: '$(backendServiceArm)'
  condition: and(succeeded(), eq('${{ parameters.terraformaction }}', 'Create'))

- task: TerraformTaskV4@4
  displayName: "Terraform destroy"
  inputs:
    provider: 'azurerm'
    command: 'destroy'
    environmentServiceNameAzureRM: '$(backendServiceArm)'
  condition: and(succeeded(), eq('${{ parameters.terraformaction }}', 'Destroy'))
